.step(data-title='How it Works')
  :markdown
    ## How It Works

    Let's go over the steps necessary to implement click-to-call in our application:

    ![Click-to-call Diagram](//s3-us-west-2.amazonaws.com/deved/clicktocall.png)

    1. A website visitor wants to connect to your organization.  She submits a web form with her phone number to receive a call connecting her to your sales or support team. 

    1. Your web application receives the form submission.  An HTTP request is initiated from your application to Twilio to initiate an outbound call. 

    1. Twilio receives the request and initiates a call to the user's phone number.

    1. User receives the call.

    1. After the call connects, Twilio asks our application for [TwiML instructions](/docs/api/twiml). Our TwiML instructs Twilio to connect the user to our sales or support teams.

    ## What We Will Learn

    This How-To demonstrates initializing a call using the [Twilio REST API][rest] and creating TwiML call logic using the [Say][say] and [Dial][dial] verbs.

    Sound like a plan? Let's get started!

    [rest]: /docs/api/rest/
    [dial]: /docs/api/twiml/dial
    [say]: /docs/api/twiml/say
.step(data-title="Application Overview", data-file='app/controllers/twilio_controller.rb')
  :markdown
    ## Our Rails Application

    In this example, we're using the [Rails framework](http://guides.rubyonrails.org/getting_started.html) for Ruby. Rails is a popular, robust web framework that provides HTTP request routing, server-side HTML rendering, model creation/validation and a configureable middleware stack to process incoming requests.

    To run this application locally, you can download it from the links above.  After extracting the app to a local directory, you can run `bundle install` to install all of the dependencies from [rubygems](https://rubygems.org/).

    Most of the server-side code for this example is found in `app/controllers/twilio_controller.rb`. We'll check that out in a moment, but first we need to configure our application with our Twilio account information.


.step(data-title='Environment', data-file='app/controllers/twilio_controller.rb', data-highlight="10-13")
  :markdown
    ## Application Configuration

    To create our click-to-call application, we'll first need to setup our environment.

    1. First, we need to initiate a new Rails application. You can learn how to setup a new rails application at [rubyonrails.org](http://guides.rubyonrails.org/getting_started.html). 

      The easiest way to create a new rails application is by typing `new rails clicktocall` in a terminal. This generator is included with Rails and sets up all of the folders and structure for a typical rails app. 

    1. Next, let's create our Gemfile in the app directory. Feel free to leave all of the default gems created by your Rails generator but for this project we really only need two gems.

      The `twilio-ruby` helper library will allow us to easily interact with the Twilio REST API. The `phony_rails` library adds phone number formatting and verification.

    1. Finally, let's put our Twilio credentials in a place where our application can access them. For the purposes of this tutorial, we'll place them in environment variables that our application can read.
      
      You can find your Twilio credentials in your [Account Dashboard](/user/account). 
      
      ``` 
          export TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxx
          export TWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyy 
      ```